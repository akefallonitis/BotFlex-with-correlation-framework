##! This script correlates various events generated by other botflex
##! scripts and decides whether a given host is a bot or not

@load botflex/utils/types
@load botflex/config
@load botflex/services/blacklist_mgr
@load botflex/detection/scan/botflex-scan
@load botflex/detection/exploit/exploit
@load botflex/detection/egg/egg
@load botflex/detection/cnc/cnc
@load botflex/detection/attack/spam
@load botflex/detection/attack/sqli
@load botflex/detection/blacklist_matcher.bro

module Correlation;

export {
	redef enum Log::ID += { LOG };

	type Info: record {
		ts:					time			&log;
		host:					addr		        &log;
		observation_start:			time			&log;	
		rule_id:				string			&log; 		
		scan:					count			&log;
		exploit:				count			&log;
		egg_download:				count			&log;
		cnc:					count			&log;
		attack:					count			&log;			
		
	};
	
	redef record connection += {
	conn: Info &optional;
	};

	## The contributory factors (or tributaries) to major event bot_infection
	type correlation_tributary: enum { Scan, Exploit, Egg_Download, CnC, Attack };

	## Expire interval for the global table concerned with maintaining bot_infection info
	global wnd_correlation = 12hrs; 

	## The event that sufficient evidence has been gathered to declare
	## bot_infection
	global bot_infection: event( ts: time, src_ip: addr, rule_id: string );
	
	## Event that can be handled to access the bot_infection
	## record as it is sent on to the logging framework.
	global log_bot_infection: event(rec: Info);

       }


type CorrelationTributaryRecord: record {
	cardinality: count &default=0;
	weight: double &default=0.0;	     	
};

## Type of the value of the global table table_correlation
## Additional contributary factors that increase the confidence
## about major event bot_infection should be added here 
type CorrelationRecord: record {
	tb_tributary: table[ correlation_tributary ] of CorrelationTributaryRecord;
	observation_start: time &default=network_time();	     	
};

function get_correlation_record(): CorrelationRecord
	{
	local rec: CorrelationRecord;	
	rec$tb_tributary[Scan] = [ $cardinality = 0, $weight = 0.0 ];
	rec$tb_tributary[Exploit] = [ $cardinality = 0, $weight = 0.0 ];
	rec$tb_tributary[Egg_Download] = [ $cardinality = 0, $weight = 0.0 ];
	rec$tb_tributary[CnC] = [ $cardinality = 0, $weight = 0.0 ];
	rec$tb_tributary[Attack] = [ $cardinality = 0, $weight = 0.0 ];

	rec$observation_start = network_time();

	return rec;	
	}


event bro_init()
	{
	Log::create_stream( Correlation::LOG, [$columns=Info, $ev=log_bot_infection] );
	}

event Input::end_of_data(name: string, source: string) 
	{
	if ( name == "config_stream" )
		{
		if ( "wnd_correlation" in Config::table_config )
			wnd_correlation = string_to_interval(Config::table_config["wnd_correlation"]$value);
		else
			print "Could not find Correlation::wnd_correlation";
		
		if ( "local_net" in Config::table_config )
			{  
			local str_our_nets = Config::table_config["local_net"]$value;
			local our_nets = split( str_our_nets, /[,]/ );
	
			for ( nt in our_nets )
				add Site::local_nets[ to_subnet(our_nets[nt]) ];
			}
		else
			print "Could not find local subnets (Site::local_nets) in BotFlex config.txt";

		}
	}
	


global bot_infection_info:Correlation::Info;

## The function that decides whether or not the major event bot_infection should
## be generated. It is called (i) every time an entry in the global table 
## table_correlation reaches certain age defined by the table attribute &create_expire,
## or (ii) Certain conditions are met 
function evaluate( src_ip: addr, t: table[addr] of CorrelationRecord ): bool
	{
	local rule_id = "";

	local condition1 = F;
	local condition2 = F;
	local condition3 = F;
	local condition4 = F;

	local card_scan = t[src_ip]$tb_tributary[Scan]$cardinality;
	local card_exploit = t[src_ip]$tb_tributary[Exploit]$cardinality;
	local card_egg_download = t[src_ip]$tb_tributary[Egg_Download]$cardinality;
	local card_cnc = t[src_ip]$tb_tributary[CnC]$cardinality;
	local card_attack = t[src_ip]$tb_tributary[Attack]$cardinality;

	local weight_scan = t[src_ip]$tb_tributary[Scan]$weight;
	local weight_exploit = t[src_ip]$tb_tributary[Exploit]$weight;
	local weight_egg_download = t[src_ip]$tb_tributary[Egg_Download]$weight;
	local weight_cnc = t[src_ip]$tb_tributary[CnC]$weight;
	local weight_attack = t[src_ip]$tb_tributary[Attack]$weight;

	# Evidence of infection and evidence of CnC communication or attack
	condition1 = (weight_cnc > 0.5) || (card_cnc > 1);

	# Evidence of infection and evidence of Cnc communication or attack
	condition2 = (card_exploit > 0) && ( (card_egg_download > 0)  || (card_cnc > 0) || (card_attack > 0));

	# Two disjoint instances of heuristically acquired Cnc evidence, egg download and attack behvaior
	condition3 = (card_cnc > 0 && card_egg_download > 0) || 
		     (card_cnc > 0 && card_attack > 0) ||
		     (card_attack > 0 && card_egg_download > 0); 

	# Evidence of inbound scan and any other phase
	#condition4 = (card_cnc > 0) && ( (card_exploit > 0) || (card_egg_download > 0) || (card_cnc > 0) || (card_attack > 0) );
	condition4 = ( (card_scan > 0) || (card_exploit > 0) || (card_egg_download > 0) || (card_cnc > 0) || (card_attack > 0) );

	if (condition1)
		rule_id = "condition1";
	else if (condition2)
		rule_id = "condition2";
	else if (condition3)
		rule_id = "condition3";
	else if (condition4)
		rule_id = "condition4";
		
	if( condition1 || condition2 || condition3 || condition4 )
		{		
		local ts = network_time();
    		event bot_infection( ts, src_ip, rule_id );		

		## Log bot_infection related entries
		bot_infection_info$host = src_ip;			
		bot_infection_info$rule_id = rule_id;					    		
		bot_infection_info$observation_start = t[src_ip]$observation_start;  				
		bot_infection_info$ts = ts;						
		bot_infection_info$scan = t[src_ip]$tb_tributary[Scan]$cardinality;					
		bot_infection_info$exploit = t[src_ip]$tb_tributary[Exploit]$cardinality; 				
		bot_infection_info$egg_download = t[src_ip]$tb_tributary[Egg_Download]$cardinality; 				
		bot_infection_info$cnc = t[src_ip]$tb_tributary[CnC]$cardinality; 					
		bot_infection_info$attack = t[src_ip]$tb_tributary[Attack]$cardinality; 						

		Log::write(Correlation::LOG,bot_infection_info);

		return T;
		}
	return F;
	}

## Called when an entry in the global table table_correlation exceeds certain age, as specified
## in the table attribute create_expire.
function correlation_record_expired(t: table[addr] of CorrelationRecord, idx: any): interval
	{
	evaluate( idx, t );
	return wnd_correlation;
	}


## The global state table that maintains various information pertaining to the
## major event attack, and is analyzed when a decision has to be made whether
## or not to declare the major event attack
global table_correlation: table[addr] of CorrelationRecord &create_expire=0sec &expire_func=correlation_record_expired;

## Inbound Scan related events
##-------------------------------------------------------------------------------------
event BotflexScan::scan_ib( victim: addr, weight: double )
	{	
	if (victim !in table_correlation)
		table_correlation[victim] = get_correlation_record();

	++ table_correlation[victim]$tb_tributary[ Scan ]$cardinality;
	 table_correlation[victim]$tb_tributary[ Scan ]$weight = weight;

	local done = evaluate( victim, table_correlation ); 
	if ( done )
		delete table_correlation[victim];
	}


## Client exploit related events
##-------------------------------------------------------------------------------------
event Exploit::exploit( victim: addr, weight: double )
	{
	if (victim !in table_correlation)
		table_correlation[victim] = get_correlation_record();

	++ table_correlation[victim]$tb_tributary[Exploit]$cardinality;
		
	table_correlation[victim]$tb_tributary[Exploit]$weight = weight;

	local done = evaluate( victim, table_correlation );
	if ( done )
		delete table_correlation[victim];  

	}


## Egg download related events
##-------------------------------------------------------------------------------------
event Egg::egg_download( src_ip: addr, weight: double )
	{
	if (src_ip !in table_correlation)
		table_correlation[src_ip] = get_correlation_record();

	++ table_correlation[src_ip]$tb_tributary[ Egg_Download ]$cardinality;
	table_correlation[src_ip]$tb_tributary[ Egg_Download ]$weight = weight;
	
	local done = evaluate( src_ip, table_correlation );
	if ( done )
		delete table_correlation[src_ip]; 
	}


## CnC related events
##-------------------------------------------------------------------------------------
event CNC::cnc( src_ip: addr, weight: double )
	{
	if (src_ip !in table_correlation)
		table_correlation[src_ip] = get_correlation_record();

	++ table_correlation[src_ip]$tb_tributary[ CnC ]$cardinality;
	table_correlation[src_ip]$tb_tributary[ CnC ]$weight = weight;

	local done = evaluate( src_ip, table_correlation );
	if ( done )
		delete table_correlation[src_ip];

	}


## Attack related events
##-------------------------------------------------------------------------------------
event Spam::spam( src_ip: addr, weight: double )
	{
	if (src_ip !in table_correlation)
		table_correlation[src_ip] = get_correlation_record();

	++ table_correlation[src_ip]$tb_tributary[ Attack ]$cardinality;
	table_correlation[src_ip]$tb_tributary[ Attack ]$weight = weight;

	local done = evaluate( src_ip, table_correlation );
	if ( done )
		delete table_correlation[src_ip];  
	}


event Sqli::sqli( src_ip: addr, weight: double )
	{
	if (src_ip !in table_correlation)
		table_correlation[src_ip] = get_correlation_record();

	++ table_correlation[src_ip]$tb_tributary[ Attack ]$cardinality;
	table_correlation[src_ip]$tb_tributary[ Attack ]$weight = weight;

	local done = evaluate( src_ip, table_correlation ); 
	if ( done )
		delete table_correlation[src_ip]; 
	}

event BotflexScan::scan_ob( src_ip: addr, weight: double )
	{
	if (src_ip !in table_correlation)
		table_correlation[src_ip] = get_correlation_record();

	++ table_correlation[src_ip]$tb_tributary[ Attack ]$cardinality;
	table_correlation[src_ip]$tb_tributary[ Attack ]$weight = weight;

	local done = evaluate( src_ip, table_correlation );
	if ( done )
		delete table_correlation[src_ip]; 
	}



