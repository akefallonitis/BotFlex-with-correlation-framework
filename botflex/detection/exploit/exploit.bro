##! This script analyzes exploit attempts that can be a precursor to botnet infection. 
##! For the time being, we look at the number of failed login attempts (break in) and
##! communication with ip's blacklisted for being involved in exploit activities. 

@load botflex/config
@load botflex/utils/types
@load botflex/services/blacklist_mgr

module Exploit;

export {
	redef enum Log::ID += { LOG };

	type Info: record {
		ts:                		time              &log;
		victim_ip:         		addr              &log;
		blacklist_attacker_ip:     	string            &log;
		blacklist_attacker_url:     	string            &log;
		msg:               		string            &log;
		submsg:               		string            &log;
		
	};
	
	redef record connection += {
	conn: Info &optional;
	};

	## Event that can be handled to access the exploit
	## record as it is sent on to the logging framework.
	global log_exploit: event(rec: Info);

	## The event that sufficient evidence has been gathered to declare the
	## exploit phase of botnet infection lifecycle
	global exploit: event( victim: addr, weight: double, detailed_name: string );

	global ip_blacklist_match: event( our_ip: addr, other_ip: addr, bl_source: string );
	global url_blacklist_match: event( our_ip: addr, other_ip: addr, bad_url: string, bl_source: string );

	global weight_exploit_blacklist_match = 0.5;
}


event bro_init()
	{
	Log::create_stream( Exploit::LOG, [$columns=Info, $ev=log_exploit] );
	}

event Input::end_of_data(name: string, source: string) 
	{
	if ( name == "config_stream" )
		{
		if ( "weight_exploit_blacklist_match" in Config::table_config )
			weight_exploit_blacklist_match = to_double(Config::table_config["weight_exploit_blacklist_match"]$value);
		else
			print "Can't find Exploit::weight_exploit_blacklist_match";
		}
	}

global exploit_info:Exploit::Info;


event Exploit::url_blacklist_match( our_ip: addr, other_ip: addr, bad_url: string, bl_source: string )
	{
	local submsg = fmt("Exploit URL blacklist matched (source: %s);", bl_source);	
	local msg = fmt("Host Exploit: %s;",submsg);
	local weight = weight_exploit_blacklist_match;
	local detailed_name = "EXPLOIT_BLACKLIST_MATCH";	

	event Exploit::exploit( our_ip, weight, detailed_name );

	## Log results
	exploit_info$ts = network_time();
	exploit_info$victim_ip = our_ip;
	exploit_info$msg = msg;
	exploit_info$submsg = submsg;
	exploit_info$blacklist_attacker_url = bad_url;

	Log::write(Exploit::LOG,exploit_info);	
	}


event Exploit::ip_blacklist_match( our_ip: addr, other_ip: addr, bl_source: string )
	{
	local submsg = fmt("Exploit IP matched blacklist (source: %s)",bl_source );	

	local msg = fmt("Host Exploit: %s;",submsg);
	local weight = weight_exploit_blacklist_match;
	local detailed_name = "EXPLOIT_BLACKLIST_MATCH";	

	event Exploit::exploit( our_ip, weight, detailed_name );

	## Log results
	exploit_info$ts = network_time();
	exploit_info$victim_ip = our_ip;
	exploit_info$msg = msg;
	exploit_info$submsg = submsg;
	exploit_info$blacklist_attacker_ip = fmt("%s",other_ip);

	Log::write(Exploit::LOG,exploit_info);
	}
